// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0


// Experimental attempt to specify fast CT-NTT in Cryptol
type MLKEM_Q = 3329
type MLKEM_N = 256
type Zq = (Z MLKEM_Q)
type Z_q_256 = [MLKEM_N]Zq


coerceSize : {m, n, a} [m]a -> [n]a
coerceSize xs = [ xs @ i | i <- [0 .. <n] ]

// Simple lookup table for Zeta value given K
zeta_expc  : [128]Zq
zeta_expc = [ 1, 1729, 2580, 3289, 2642, 630, 1897, 848,
              1062, 1919, 193, 797, 2786, 3260, 569, 1746,
              296, 2447, 1339, 1476, 3046, 56, 2240, 1333,
              1426, 2094, 535, 2882, 2393, 2879, 1974, 821,
              289, 331, 3253, 1756, 1197, 2304, 2277, 2055,
              650, 1977, 2513, 632, 2865, 33, 1320, 1915,
              2319, 1435, 807, 452, 1438, 2868, 1534, 2402,
              2647, 2617, 1481, 648, 2474, 3110, 1227, 910,
              17, 2761, 583, 2649, 1637, 723, 2288, 1100,
              1409, 2662, 3281, 233, 756, 2156, 3015, 3050,
              1703, 1651, 2789, 1789, 1847, 952, 1461, 2687,
              939, 2308, 2437, 2388, 733, 2337, 268, 641,
              1584, 2298, 2037, 3220, 375, 2549, 2090, 1645,
              1063, 319, 2773, 757, 2099, 561, 2466, 2594,
              2804, 1092, 403, 1026, 1143, 2150, 2775, 886,
              1722, 1212, 1874, 1029, 2110, 2935, 885, 2154 ]

// CT Butterfly on lower half of vector v
ct_lowerhalf :
    {p, q}
    (fin p, p >= 2, p <= 8, fin q, q >= 1, q <= 7, q == p - 1) =>
    // Length of v is a member of {256,128,64,32,16,8,4}
    // but returns half that length
    [2^^p]Zq -> Zq -> [2^^q]Zq
ct_lowerhalf v zeta = new_v
  where
    len = 2 ^^ `q
    new_v = [ v@x + (zeta * v@(x + len)) | x <- [0 .. (2^^q)-1] ]

// CT Butterfly on upper half of vector v
ct_upperhalf :
    {p, q}
    (fin p, p >= 2, p <= 8, fin q, q >= 1, q <= 7, q == p - 1) =>
    // Length of v is a member of {256,128,64,32,16,8,4}
    // but returns half that length
    [2^^p]Zq -> Zq -> [2^^q]Zq
ct_upperhalf v zeta = new_v
  where
    len = 2 ^^ `q
    new_v = [ v@x - (zeta * v@(x + len)) | x <- [0 .. (2^^q)-1] ]

// Single butterfly step
ct_butterfly :
    {m}
    (m >= 2, m <= 8) =>
    [2^^m]Zq -> Zq -> [2^^m]Zq
ct_butterfly v zeta = new_v
  where
    lower = ct_lowerhalf`{m,m-1} v zeta
    upper = ct_upperhalf`{m,m-1} v zeta
    new_v = coerceSize (lower # upper)

// NTTl
nttl :
    {n}  // Length of v is a member of {256,128,64,32,16,8,4}
    (n >= 2, n <= 8) =>
    [2^^n]Zq -> Zq -> [2^^n]Zq
nttl v k
  | n == 2 => ct_butterfly`{n} v zeta
                where zeta = zeta_expc@(fromZ k)
  | n  > 2 => coerceSize ((nttl`{n-1} s0 (k * 2)) #
                          (nttl`{n-1} s1 (k * 2 + 1)))
                where
                  zeta = zeta_expc@(fromZ k)
                  t = ct_butterfly`{n} v zeta
                  // Split t into two halves s0 and s1
                  [s0, s1] = split (coerceSize t)

// Top level entry point - start with N=256, K=1
ntt : Z_q_256 -> Z_q_256
ntt v = nttl v 1
