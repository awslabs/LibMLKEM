// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

//===========================================================
// Fast CT-NTT and GS-Inverse-NTT in Cryptol
// as required by MLKEM
//===========================================================

type MLKEM_Q = 3329
type MLKEM_N = 256
type Zq = (Z MLKEM_Q)
type Z_q_256 = [MLKEM_N]Zq

//======================================================
// Galois section - from cryptol-specs repository
//
// This section:
//    Copyright (c) 2013-2019 Galois Inc.
//    All rights reserved.
//
// Modified by rodchap, July 2024 to integrates types
// and notations with the code below.
//======================================================
base_zeta = 17 : Zq

BitRev7 : [8] -> [8]
BitRev7 = reverse

// This is simple but O(n**2)
ParametricNTT : Z_q_256 -> Zq -> Z_q_256
ParametricNTT f root = join[[f2i i, f2iPlus1 i] | i <- [0 .. 127]]
  where f2i i      = sum [f@(2*j)   * root ^^ ((2*(BitRev7 i >> 1)+1)*j) | j <- [0 .. 127]]
        f2iPlus1 i = sum [f@(2*j+1) * root ^^ ((2*(BitRev7 i >> 1)+1)*j) | j <- [0 .. 127]]

ParametricNTTInv : Z_q_256 -> Zq -> Z_q_256
ParametricNTTInv f root = join[[f2i i, f2iPlus1 i] | i <- [0 .. 127]]
  where f2i i      = sum [f@(2*j)   * root ^^ ((2*(BitRev7 j >> 1)+1)*i) | j <- [0 .. 127]]
        f2iPlus1 i = sum [f@(2*j+1) * root ^^ ((2*(BitRev7 j >> 1)+1)*i) | j <- [0 .. 127]]

naive_ntt : Z_q_256 -> Z_q_256
naive_ntt f = ParametricNTT f base_zeta

naive_invntt : Z_q_256 -> Z_q_256
naive_invntt f = [term*(recip 128) | term <- ParametricNTTInv f (recip base_zeta)]

// Properties and proofs

naive_ntt_inverts    : Z_q_256 -> Bit
property naive_ntt_inverts    f =  naive_invntt (naive_ntt f)    == f

naive_invntt_inverts : Z_q_256 -> Bit
property naive_invntt_inverts f =  naive_ntt    (naive_invntt f) == f

//======================================================
// End of Galois section
//======================================================

//  "coerceSize" is a trick that forces a dynamic rather than
//  a static type check in Cryptol.
coerceSize : {m, n, a} [m]a -> [n]a
coerceSize xs = [ xs @ i | i <- [0 .. <n] ]

// Simple lookup table for Zeta value given K
zeta_expc  : [128]Zq
zeta_expc = [ 1, 1729, 2580, 3289, 2642, 630, 1897, 848,
              1062, 1919, 193, 797, 2786, 3260, 569, 1746,
              296, 2447, 1339, 1476, 3046, 56, 2240, 1333,
              1426, 2094, 535, 2882, 2393, 2879, 1974, 821,
              289, 331, 3253, 1756, 1197, 2304, 2277, 2055,
              650, 1977, 2513, 632, 2865, 33, 1320, 1915,
              2319, 1435, 807, 452, 1438, 2868, 1534, 2402,
              2647, 2617, 1481, 648, 2474, 3110, 1227, 910,
              17, 2761, 583, 2649, 1637, 723, 2288, 1100,
              1409, 2662, 3281, 233, 756, 2156, 3015, 3050,
              1703, 1651, 2789, 1789, 1847, 952, 1461, 2687,
              939, 2308, 2437, 2388, 733, 2337, 268, 641,
              1584, 2298, 2037, 3220, 375, 2549, 2090, 1645,
              1063, 319, 2773, 757, 2099, 561, 2466, 2594,
              2804, 1092, 403, 1026, 1143, 2150, 2775, 886,
              1722, 1212, 1874, 1029, 2110, 2935, 885, 2154 ]

//======================================================
// Fast recursive CT-NTT
//======================================================

ct_butterfly :
    {m, hm}
    (m >= 2, m <= 8, hm >= 1, hm <= 7, hm == m - 1) =>
    [2^^m]Zq -> Zq -> [2^^m]Zq
ct_butterfly v zeta = new_v
  where
    halflen = 2^^`hm
    lower, upper : [2^^hm]Zq
    lower@x = v@x + (zeta * v@(x + halflen))
    upper@x = v@x - (zeta * v@(x + halflen))
    new_v = coerceSize (lower # upper)

// fast_nttl - local, recursive NTT
fast_nttl :
    {n}  // Length of v is a member of {256,128,64,32,16,8,4}
    (n >= 2, n <= 8) =>
    [2^^n]Zq -> [8] -> [2^^n]Zq
fast_nttl v k
  // Base case. n==2 so just compute the butterfly and return
  | n == 2 => ct_butterfly`{n,n-1} v (zeta_expc@k)

  // Recursive case. Butterfly what we have, then recurse on each half,
  // concatenate the results and return
  | n  > 2 => coerceSize ((fast_nttl`{n-1} s0 (k * 2)) #
                          (fast_nttl`{n-1} s1 (k * 2 + 1)))
                where
                  t = ct_butterfly`{n,n-1} v (zeta_expc@k)
                  // Split t into two halves s0 and s1
                  [s0, s1] = split (coerceSize t)

// Top level entry point - start with N=256, K=1
fast_ntt : Z_q_256 -> Z_q_256
fast_ntt v = fast_nttl v 1

//======================================================
// Fast recursive GS-Inverse-NTT
//======================================================

gs_butterfly :
    {m, hm}
    (m >= 2, m <= 8, hm >= 1, hm <= 7, hm == m - 1) =>
    [2^^m]Zq -> Zq -> [2^^m]Zq
gs_butterfly v zeta = new_v
  where
    halflen = 2^^`hm
    lower, upper : [2^^hm]Zq
    lower@x = v@x  + v@(x + halflen)
    upper@x = zeta * (v@(x + halflen) - v@x)
    new_v = coerceSize (lower # upper)

// fast_invnttl - local, recursive Inverse NTT
fast_invnttl :
    {n}  // Length of v is a member of {256,128,64,32,16,8,4}
    (n >= 2, n <= 8) =>
    [2^^n]Zq -> [8] -> [2^^n]Zq

fast_invnttl v k
  // Base case. n==2 so just compute the butterfly and return
  | n == 2 => gs_butterfly`{n,n-1} v (zeta_expc@k)

  // Recursive case. Recurse on each half,
  // concatenate the results, butterfly that, and return
  | n  > 2 => gs_butterfly`{n,n-1} t (zeta_expc@k)
                where
                  // Split t into two halves s0 and s1
                  [s0, s1] = split (coerceSize v)
                  t = coerceSize ((fast_invnttl`{n-1} s0 (k * 2 + 1)) #
                                  (fast_invnttl`{n-1} s1 (k * 2)))

// Multiply all elements of v by the reciprocal of 128 (modulo Q)
recip_128_modq = (recip 128) : Zq
mul_recip128 : Z_q_256 -> Z_q_256
mul_recip128 v = [ v@x * recip_128_modq | x <- [0 .. <MLKEM_N] ]

// Top level entry point - start with N=256, K=1
fast_invntt : Z_q_256 -> Z_q_256
fast_invntt v = mul_recip128 (fast_invnttl v 1)

//======================================================
// Properties and proofs
//======================================================

// This property demonstrates that `fast_ntt` is the inverse of `fast_invntt`.
// ```
// :prove fast_ntt_inverts
// ```
fast_ntt_inverts    : Z_q_256 -> Bit
property fast_ntt_inverts    f =  fast_invntt (fast_ntt f)    == f

// This property demonstrates that `fast_invntt` is the inverse of `fast_ntt`.
// ```
// :prove fast_invntt_inverts
// ```
fast_invntt_inverts : Z_q_256 -> Bit
property fast_invntt_inverts f =  fast_ntt    (fast_invntt f) == f

// This property demonstrates that `naive_ntt` is equivalent to `fast_ntt`.
// ```
// :prove naive_fast_ntt_equiv
// ```
naive_fast_ntt_equiv : Z_q_256 -> Bit
property naive_fast_ntt_equiv f =  naive_ntt f == fast_ntt f

// This property demonstrates that `naive_invntt` is equivalent to `fast_invntt`.
// ```
// :prove naive_fast_invntt_equiv
// ```
naive_fast_invntt_equiv : Z_q_256 -> Bit
property naive_fast_invntt_equiv f =  naive_invntt f == fast_invntt f
