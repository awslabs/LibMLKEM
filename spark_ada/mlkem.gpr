--  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
--  SPDX-License-Identifier: Apache-2.0

with "libkeccak/libkeccak.gpr";
library project MLKEM is

   for Library_Name use "mlkem";
   for Library_Version use "0.0.0";

   for Source_Dirs use ("src");
   for Object_Dir use "obj";
   for Create_Missing_Dirs use "True";
   for Library_Dir use "lib";

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type :=
     external ("MLKEM_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static"));
   for Library_Kind use Library_Type;

   type Enabled_Kind is ("enabled", "disabled");
   Compile_Checks   : Enabled_Kind := External ("MLKEM_COMPILE_CHECKS", "enabled");
   Runtime_Checks   : Enabled_Kind := External ("MLKEM_RUNTIME_CHECKS", "enabled");
   Style_Checks     : Enabled_Kind := External ("MLKEM_STYLE_CHECKS", "enabled");
   Contracts_Checks : Enabled_Kind := External ("MLKEM_CONTRACTS", "enabled");
   Coverage_Checks  : Enabled_Kind := External ("MLKEM_COVERAGE", "disabled");

   type Concurrency_Kind is ("sequential", "parallel_3", "parallel_all");
   Concurrency_Option : Concurrency_Kind := External ("MLKEM_CONCURRENCY", "sequential");

   type Build_Kind is ("debug", "O1", "O2", "O3", "Os", "Og");
   Build_Mode : Build_Kind := External ("MLKEM_BUILD_MODE", "debug");

   type Runtime_Kind is ("full", "zfp");
   Runtime_Mode : Runtime_Kind := External ("MLKEM_RUNTIME_MODE", "full");

   --  Extend this list to add any options for specific targets and see below
   type Target_Arch_Kind is ("unspecified", "rv32im", "rv32imc", "rv32imc_a4");
   Target_Arch : Target_Arch_Kind := External ("MLKEM_TARGET_ARCH", "unspecified");

   Callgraph_Switch := ("-fcallgraph-info=su,da");

   Compile_Checks_Switches := ();
   case Compile_Checks is
      when "enabled" =>
            -- All warnings on and treated as errors except
            --   Static conditional expressions (C)
            --   Suspicious modulii  (.M)
            --   Wrong order params (.P)
            --   Suspicious contracts (.T)
            --   Exception propagation (.X)
            Compile_Checks_Switches := ("-gnatwaeC.M.P.T.X");
      when others => null;
   end case;

   Coverage_Checks_Switches := ();
   case Coverage_Checks is
      when "enabled" =>
         Coverage_Checks_Switches :=
           ("--coverage");
      when others => null;
   end case;

   Runtime_Checks_Switches := ();
   case Runtime_Checks is
      when "enabled" => null;
      when others =>
         Runtime_Checks_Switches :=
           ("-gnatp"); -- Supress checks
   end case;

   Style_Checks_Switches := ();
   case Style_Checks is
      when "enabled" => null;
         Style_Checks_Switches :=
           ("-gnaty-s");    -- style checks on except distinct subprogram declarations
      when others => null;
   end case;

   Contracts_Switches := ();
   case Contracts_Checks is
      when "enabled" =>
         Contracts_Switches :=
           ("-gnata", "-gnatVa"); --  Enable assertions and contracts
      when "disabled" =>
         null;
   end case;

   Build_Switches := ();
   case Build_Mode is
      when "debug" =>
         Build_Switches := ("-g",   -- Debug info
                            "-O0"); -- No optimization
      when "O1" =>
         Build_Switches := ("-O1",     -- Optimization
                            "-gnatn"); -- Enable inlining
      when "O2" =>
         Build_Switches := ("-O2",     -- Optimization
                            "-gnatn"); -- Enable inlining
      when "O3" =>
         Build_Switches := ("-O3",     -- Optimization
                            "-gnatn"); -- Enable inlining
      when "Os" =>
         Build_Switches := ("-Os");     -- Optimize for small code size, no inlining
      when "Og" =>
         Build_Switches := ("-g",
                            "-Og");
   end case;

   --  Extend this case choice for any other target/architecture specific switches
   case Target_Arch is
      when "rv32im" =>
         Build_Switches := Build_Switches &
           ("-march=rv32im"); -- RV32IM but NO Compressed instructions
      when "rv32imc" =>
         Build_Switches := Build_Switches &
           ("-march=rv32imc"); -- RV32IM with Compressed instructions
      when "rv32imc_a4" =>
         Build_Switches := Build_Switches &
           ("-march=rv32imc") & -- Compressed instructions but all BBs on 4-byte alignment
           ("-falign-functions=4") &
           ("-falign-jumps=4") &
           ("-falign-loops=4") &
           ("-falign-labels=4");
      when others => null;
   end case;

   case Runtime_Mode is
      when "zfp" =>
         for Runtime ("Ada") use "zfp";
         for Excluded_Source_Files use ("mlkem-debug.ads", "mlkem-debug.adb");
      when others =>
         null;
   end case;

   package Naming is
      case Concurrency_Option is
         when "sequential" =>
            for Body ("MLKEM.K_PKE_KeyGen") use "mlkem-k_pke_keygen.adb";
         when "parallel_3" =>
            for Body ("MLKEM.K_PKE_KeyGen") use "mlkem-k_pke_keygen_par.adb";
         when "parallel_all" =>
            for Body ("MLKEM.K_PKE_KeyGen") use "mlkem-k_pke_keygen_par.adb";
      end case;
   end Naming;

   package Compiler is
      for Default_Switches ("Ada") use
        Compile_Checks_Switches &
        Callgraph_Switch &
        Build_Switches &
        Runtime_Checks_Switches &
        Style_Checks_Switches &
        Contracts_Switches &
        Coverage_Checks_Switches &
        ("-fstack-usage") &
        ("-ffunction-sections") & -- Create a linker section for each function
        ("-fdata-sections") &    -- Create a linker section for each data area
        ("-gnatQ");    -- Don't quit. Generate ALI and tree files even if illegalities

      for Local_Configuration_Pragmas use "mlkem.adc";

   end Compiler;

   package Binder is
      for Switches ("Ada") use ("-Es"); --  Symbolic traceback
   end Binder;

   package Prove is
      for Proof_Switches ("Ada") use ("--proof=per_path",
                                      "-j8",
                                      "--no-global-generation",
                                      "--no-inlining",
                                      "--no-loop-unrolling",
                                      "--level=1",
                                      "--prover=z3,cvc5,altergo",
                                      "--timeout=4",
                                      "--memlimit=0",
                                      "--steps=25000",
                                      "--report=statistics");
   end Prove;


   --  All the main MLKEM entry points
   Stack_Entry_Points := ("-emlkem.mlkem_keygen,mlkem.mlkem_encaps,mlkem.mlkem_decaps");

   package Stack is
      for Switches use ("-Wa", "-u 128", "-np", "-v") & Stack_Entry_Points;
   end Stack;

end MLKEM;
